#!/bin/bash

# Description: This script transforms child datasets of a given ZFS parent dataset into regular directories.
#              The script renames each child dataset, copies the contents of the old mountpoint to the new
#              mountpoint, and checks for differences before deleting the old mountpoint. The original child
#              datasets are not modified, and the new directories will have the same name as the original
#              datasets, but without the leading parent dataset name.
#
# Usage:       ./transform_zfs_dataset_to_folder.sh [-n] PARENT_DATASET
#
#              -n or --dry-run (optional): dry run mode, only show what would be done without actually doing anything
#              PARENT_DATASET (required): the name of the parent dataset to transform

DRY_RUN=0

# Parse command line arguments
while [ "$1" != "" ]; do
    case $1 in
        -n | --dry-run )        DRY_RUN=1
                                ;;
        * )                     PARENT_DATASET=$1
                                ;;
    esac
    shift
done

# Get the absolute path of the parent dataset
PARENT_DATASET_PATH=$(sudo zfs get -H -o value mountpoint $PARENT_DATASET)

# Get a list of all child datasets
CHILD_DATASETS="$(sudo zfs list -r -H -o name $PARENT_DATASET)"

# Loop over the child datasets and transform them
for DATASET in $CHILD_DATASETS
do
  # Skip the parent dataset and any non-dataset filesystems
  if [ "$DATASET" == "$PARENT_DATASET" ] || [ "$(sudo zfs get -H -o value type $DATASET)" != "filesystem" ]; then
    continue
  fi

  # Define the new mountpoint and rename the dataset
  NEW_MOUNTPOINT="$(echo $DATASET | sed "s|$PARENT_DATASET/|$PARENT_DATASET/converted/|")"
  if [ $DRY_RUN -eq 1 ]; then
    echo "DRY RUN: sudo zfs rename $DATASET $NEW_MOUNTPOINT"
  else
    sudo zfs rename $DATASET $NEW_MOUNTPOINT
  fi

  # Get the absolute path of the old and new mountpoints
  OLD_MOUNTPOINT_PATH=$(sudo zfs get -H -o value mountpoint $NEW_MOUNTPOINT)
  NEW_MOUNTPOINT_PATH=$(sudo zfs get -H -o value mountpoint $DATASET)

  # Copy the contents of the old mountpoint to the new mountpoint
  if [ $DRY_RUN -eq 1 ]; then
    echo "DRY RUN: sudo rsync -a --delete --no-perms $OLD_MOUNTPOINT_PATH/ $NEW_MOUNTPOINT_PATH/"
  else
    sudo rsync -a --delete --no-perms $OLD_MOUNTPOINT_PATH/ $NEW_MOUNTPOINT_PATH/
  fi

  # Check if there are any differences between the old and new mountpoints
    diff_output="$(diff -r $OLD_MOUNTPOINT_PATH $NEW_MOUNTPOINT_PATH)"

  if [ -z "$diff_output" ]; then
    # Destroy the old mountpoint if there are no differences
    if [ $DRY_RUN -eq 1 ]; then
      echo "DRY RUN: sudo zfs destroy $NEW_MOUNTPOINT"
    else
      sudo zfs destroy $NEW_MOUNTPOINT
    fi
  else
    # Print a warning message and skip deleting the old mountpoint if there are differences
    echo "Warning: Differences found between $NEW_MOUNTPOINT and $DATASET. Skipping delete."
  fi
done
